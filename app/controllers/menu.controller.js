const Menu = require('../models/menu.model');
const MenuService = require('../services/menu.service')
const User = require('../models/user.model');
const logService = require('../services/log.services');

// POST: menu/create/:userID
exports.create = async (req, res) => {
    //Generated by Ai Linh at 03/11/20
    try {
        let menu = new Menu(req.body);
        if (menu.isMaster == true) {
            menu.parent_MenuID = null
        }
        //take the pageID from the page_link
        //the page_link should in format: /webPage/view/:pageID
        if (menu.page_link) {
            let myURL = new URL(menu.page_link)
            if (myURL.pathname.slice(0, 14) == '/webPage/view/') {
                console.log('true')
                menu.page_id = myURL.pathname.slice(14, (myURL.pathname.length))
            }
        }

        if (menu.order) {
            let isExist = await Menu.findOne({
                'order': menu.order
            });
            if (isExist) {
                res.send('order existed')
            }
        }

        await menu.save();

        //Add menu_History
        let user = await User.findOne({
            '_id': req.params.userID
        });
        menu.menu_History.push({
            user_id: req.params.userID,
            content: `Menu '${menu.display_name}' is created by '${user.username}'`
        })
        res.status(200).send(menu)
    } catch (err) {
        await logService.log_save('5',err)
    }
}

// PUT: /menu/update/:menu_id/:userID
exports.update = async (req, res) => {
    //Generated by Ai Linh at 03/11/20
    try {
        //check if the menu is master or not, if true field parent_MenuID must be null
        if (req.body.isMaster == true) {
            req.body.parent_MenuID = null
        }

        //check if the order is duplicate ỏ not
        if (req.body.order) {
            let isExist = await Menu.findOne({
                'order': req.body.order
            });
            if (isExist) {
                res.send('order existed')
            }
        }
        //take the pageID from the link
        //the page_link should in format: /webPage/view/:pageID
        if (req.body.page_link) {
            let myURL = new URL(req.body.page_link)
            if (myURL.pathname.slice(0, 14) == '/webPage/view/') {
                req.body.page_id = myURL.pathname.slice(14, (myURL.pathname.length))
            }
        }

        //prepare for the update query
        let user = await User.findOne({
            '_id': req.params.userID
        });
        let newHistory = {
            user_id: req.params.userID,
            content: `Menu '${req.body.display_name}' is modified by '${user.username}'`
        }

        //Update query
        await Menu.findOneAndUpdate({
            _id: req.params.menuID
        }, {
            $set: req.body,
            $push: {
                menu_History: newHistory
            }
        }, {
            upsert: true,
            new: true
        } //use upsert to push a new element into history array
        );
        res.status(200).send('ok')
    } catch (err) {
        let log = new logger({
            content: err,
            level: "5"
        })
        let data = await log.save();
        console.log(err)

        if (!data) {
            locallog.error(err);
            res.status(400).send(err)
        }
    }
}

//GET: /menu/showAll
exports.showAll = async (req, res) => {
    //Generated by Ai Linh at 03/11/20
    try {
        let menus = await Menu.find().lean();
        let menu_sorted = await customSort(menus, 'asc', 'order')
        res.status(200).send(ok)
    } catch (error) {

    }
}

//GET: /menu/find_childMenu/:menuID
exports.find_childMenu = async (req, res) => {
    //Generated by Ai Linh at 03/11/20
    try {
        // let menus = find_Children(req.params.menuID)
        let menus = await Menu.findOne().where({ parent_MenuID: req.params.menuID })
        if (menus) {
            console.log(menus);
            console.log('true');
        } else {
            console.log(menus);
            console.log('false');
        }
        res.status(200).send(menus)
    } catch (err) {
        console.log('---------------------------------------------');
        await logService.log_save('5',err, `error: `)
        
    }
}

// PUT: menu/swapOrder/:downOrUp/:menuID
exports.swapOrder = async (req, res) => {
//Generated by Ai Linh at 03/11/20

    //swapping 'menu' with 'swap_menu'
    // all child menus of them must also be modify too.
    try {
        let menu = await Menu.findOne({ _id: req.params.menuID })

        let array_order = menu.order.split('.') //split from 3.2.1 => [3,2,1]
        let last_order = parseInt(array_order[array_order.length - 1]) //take the last element: 1 => convert to integer
        let first_order = array_order.slice(0, -1).join('.') //join from [3,2,1] to 3.2

        
        //if down check order is 1 
        //if up check order is the last
        if (req.params.downOrUp === 'down') {
            let child_arr = await find_Children(menu.parent_MenuID)
            console.log(child_arr);
            let max = 0
            child_arr.forEach(el => {
                let temp = el.order.substring(el.order.lastIndexOf('.') +1)
                if (max < temp) max = temp
            })
            if(last_order == max) res.status(400).send("this menu cannot swap down")
        }
        else if (req.params.downOrUp === 'up') {
            if (last_order == 1) res.status(400).send("this menu cannot swap up")
        }
        else req.status(400).send("wrong API");

        //find the swap_menu: 3.2.2
        let swap_menu = ''
        let flag = true
        while (flag) {
            (req.params.downOrUp === 'down') 
                ?last_order++ 
                :last_order--

            let full_order
            (!first_order)
                ? full_order = last_order.toString() // case that the menu is master, example: 5 => first_order is null
                : full_order = first_order + '.' + last_order.toString() //3.2.2

            swap_menu = await Menu.findOne({ order: full_order })// find the menu have order 3.2.2
            if (swap_menu) break
        }

        //find all children menus of 'menu' (contain `grand-menu` of child menu)
        let child_menu = await find_allChildMenu(menu.order)
        let child_swap_menu = await find_allChildMenu(swap_menu.order)

        //the menu 3.2.1 => 3.2.2 and their child 3.2.1.1 => 3.2.2.1
        child_menu.forEach(async el => {
            let true_order = swap_menu.order + el.order.slice(menu.order.length, el.order.length)
            await Menu.findByIdAndUpdate(el._id, { order: true_order }, { new: true })
        })
        //the swap_menu 3.2.2 => 3.2.1 and their child 3.2.2.1 => 3.2.1.1
        child_swap_menu.forEach(async el => {
            let true_order = menu.order + el.order.slice(swap_menu.order.length, el.order.length)
            await Menu.findByIdAndUpdate(el._id, { order: true_order }, { new: true })
        })
        res.status(200).send("ok")
    } catch (err) {
        let log = new logger({
            content: err,
            level: "5"
        })
        let data = await log.save();
        console.log(err)

        if (!data) {
            locallog.error(err);
            res.status(400).send(err)
        }
    }
}

// PUT: /menu/update_order
exports.update_order = async (req, res) => {
    //Generated by Ai Linh at 03/11/20
    try {
        console.log(req.body);
        for (let i = 0; i < (req.body.length - 1); i++) {
            for (let j = 0; i < (req.body.length - 1); i++) {
                console.log(`i: ${req.body.order[i]}`);
                console.log(`j: ${req.body.order[j]}`);
                if (req.body.order[i] === req.body.order[j]) {
                    res.status(400).send(`found duplicate order at ${req.body[i]} and ${req.body[j]}`)
                    break;
                }
            }
        }
        req.body.forEach(async el => {
            await Menu.findByIdAndUpdate(el._id, { order: el.order })
        });
        res.status(200).send("ok")
    } catch (err) {
        let log = new logger({
            content: err,
            level: "5"
        })
        let data = await log.save();

        if (!data) {
            locallog.error(err);
            res.status(400).send({ message: 'Could not save log of the error' + err })
        }
    }
}

//DELETE: /menu/delete/:menuID/:userID
exports.delete = async (req, res) => {
    //Generated by Ai Linh at 03/11/20
    try {
        let menu = await Menu.findByIdAndDelete(req.params.menuID)
        let user = await User.findOne({
            '_id': req.params.userID
        });
        //save in the log table in database
        let log = new logger({
            content: `The menu '${menu.display_name}' is deleted successfully by '${user.username}' `,
            level: "0"
        })
        await log.save();
        res.status(200).send(log)
    } catch (err) {
        let log = new logger({
            content: err,
            level: "5"
        })
        let data = await log.save();

        if (!data) {
            locallog.error(err);
            res.status(400).send({ message: 'Could not save log of the error' + err })
        }
    }
}