const Menu = require('../models/menu.model');

exports.isExist_Order = async (menu_order)=>{
    let isExist = await Menu.find({order: menu_order})
    if(isExist) return isExist
    else return false
}

// sort array number with dot: 1.1.2, 3.2,...
exports.customSort = async (arr, order_string, order_value) =>{
    //Generated by Ai Linh at 03/11/20
    mapped = await arr.map(function (el, i) {
        return { index: i, value: el[order_value].split('.').map(Number) };
    });

    var sort = {
        asc: function (a, b) {
            var l = 0, m = Math.min(a.value.length, b.value.length);
            while (l < m && a.value[l] === b.value[l]) {
                l++;
            }
            return l === m ? a.value.length - b.value.length : a.value[l] - b.value[l];
        },
        desc: function (a, b) {
            return sort.asc(b, a);
        }
    };

    mapped.sort(sort[order_string] || sort.asc);
    return mapped.map(el => arr[el.index]);
}

// find all child menu, even the child of child menus.
// if parent is 3.2 => all child of its also begin will 3.2
exports.find_allChildMenu = async (parentsMenu_order) => {
//Generated by Ai Linh at 03/11/20
    let all_menu = await Menu.find()
    let result = []
    all_menu.forEach(el => {
        if (el.order.slice(0, parentsMenu_order.length) === parentsMenu_order) {
            result.push(el)
        }
    })
    return result
}

exports.find_Children = async (parentMenu_ID)=> {
    //Generated by Ai Linh at 03/11/20
    let arr
    try {
        arr = await Menu.findOne().where({ parent_MenuID: parentMenu_ID })
        return arr
    } catch (err) {
        await logService.log_save('5',err, `error: `)
        return arr = null
    }
}